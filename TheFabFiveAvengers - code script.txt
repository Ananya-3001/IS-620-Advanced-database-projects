--IS 620 FINAL GROUP PROJECT - Fall 2023

--Submitted by:
--Team The Fab Five Avengers
--Ananya Smarani Ragi (KE52132)
--Atibha Narasu Velala (NU93896)
--Jagadeeswari Sambangi (HD76292)
--Khushdeep Kaur(EU63373)
--Sravani Linga(OO40177)



--Team Members:
--Member 1 (Spokeperson) -Sravani Linga  - OO40177 - (Member 1 is responsible for adding and maintaining the customers & Cedit_cards tables and  look into few other procedures)
--Member 2 (Quality Control) - Ananya Smarani Ragi  - KE52132 - (Member 2  is responsible for adding and maintaining the product_categories & products tables and  look into few other procedures)
--Member 3 (Facilitator) -Atibha Narasu Velala  - NU93896 - (Member 3  is responsible for maintaining the orders & invoices tables and  look into few other procedures)
--Member 4 (Process Analyst) -Jagadeeswari Sambangi  - HD76292 - (Member 4 is responsible for monitoring the customer type based on their purchases and  look into few other procedures)
--Member 5 (Quality Control) - Khushdeep Kaur - EU63373 - (Member 5  is responsible for adding and maintaining the reviews & recommendations tables and  look into few other procedures)


--Each participant has contributed as a programmer and as a tester to help troubleshoot the code as needed.

--Title: An Online Shopping DB System

--The primary goal of this project is to create an online database system for shopping by drawing on the lessons learned over the semester.
--Utilized every idea whenever and wherever it was needed. 
--All necessary data may be pushed into the appropriate tables by executing the last anonymous block simultaneously.

--—Order of Execution: 
--—1) Turn on the server output first.
--2) Drop/Remove the tables.
--3) Create  table.
--4) Execute every helper function separately.

--5) Execute each member procedure separately. If a procedure requires the execution of the drop and create sequence commands, please ensure that these are executed first and then carry out the operation.
--6) Lastly, please ensure every table is empty before executing the anonymous block.
--7) Execute the block in anonymity.

--8) Next, use the provided select commands to confirm the table state.

--NOTE: In order to prevent command confusion errors, make sure to execute each procedure sequentially as mentioned above.
-- Enable server output to display DBMS_OUTPUT messages

SET SERVEROUTPUT ON

-- Drop existing tables

DROP TABLE RECOMMENDATIONS cascade constraints;
DROP TABLE REVIEWS cascade constraints;
DROP TABLE INVOICES cascade constraints;
DROP TABLE CREDITCARDS cascade constraints;
DROP TABLE ORDERS cascade constraints;
DROP TABLE PRODUCTS cascade constraints;
DROP TABLE PRODUCTCATEGORIES cascade constraints;
DROP TABLE CUSTOMERS cascade constraints;

-- Define database tables

-- Customers Table (Member 1 - Sravani Linga)

CREATE TABLE Customers (
  customer_id NUMBER PRIMARY KEY,
  name VARCHAR2(100),
  email VARCHAR2(100) UNIQUE,
  city VARCHAR2(50),
  state VARCHAR2(50),
  zip VARCHAR2(20)
);

-- Product Categories Table (Member 2 - Ananya Smarani)

CREATE TABLE ProductCategories (
  category_id NUMBER PRIMARY KEY,
  category_name VARCHAR2(50) UNIQUE,
  description VARCHAR2(200)
);

-- Products Table (Member 2 - Ananya Smarani)

CREATE TABLE Products (
  product_id NUMBER PRIMARY KEY,
  product_name VARCHAR2(100) UNIQUE,
  available_quantity NUMBER,
  unit_price NUMBER,
  category_id NUMBER REFERENCES ProductCategories(category_id)
);

-- Orders Table (Member 3 - Atibha Velala)

CREATE TABLE Orders (
  order_id NUMBER PRIMARY KEY,
  customer_id NUMBER REFERENCES Customers(customer_id),
  product_id NUMBER REFERENCES Products(product_id),
  quantity NUMBER,
  order_date TIMESTAMP
);

-- Credit Cards Table (Member 1 - Sravani Linga)

CREATE TABLE CreditCards (
  customer_id NUMBER REFERENCES Customers(customer_id),
  credit_card_number VARCHAR2(20) PRIMARY KEY,
  credit_card_type VARCHAR2(20),
  expiration_year NUMBER,
  expiration_month NUMBER
);

-- Invoices Table (Member 4 - Jagadeeswari Sambangi)

CREATE TABLE Invoices (
  invoice_id NUMBER PRIMARY KEY,
  order_id NUMBER REFERENCES Orders(order_id),
  customer_id NUMBER REFERENCES Customers(customer_id),
  credit_card_number VARCHAR2(20) REFERENCES CreditCards(credit_card_number),
  amount NUMBER
);

-- Reviews Table (Member 5 - Khushdeep Kaur)

CREATE TABLE Reviews (
  review_id NUMBER PRIMARY KEY,
  product_id NUMBER REFERENCES Products(product_id),
  reviewer_email VARCHAR2(100),
  stars_given NUMBER,
  review_text VARCHAR2(1000)
);

-- Recommendations Table (Member 5 - Khushdeep Kaur)

CREATE TABLE Recommendations (
  recommendation_id NUMBER PRIMARY KEY,
  customer_id NUMBER REFERENCES Customers(customer_id),
  recommended_product_id NUMBER REFERENCES Products(product_id),
  recommendation_date TIMESTAMP
);

-- drop any existing sequences

DROP SEQUENCE CUSTOMER_ID_SEQ;
DROP SEQUENCE CATEGORY_ID_SEQ;
DROP SEQUENCE PRODUCT_ID_SEQ;
DROP SEQUENCE ORDER_ID_SEQ;
DROP SEQUENCE INVOICE_ID_SEQ;
DROP SEQUENCE REVIEW_ID_SEQ;
DROP SEQUENCE RECOMMENDATION_ID_SEQ;

-- Define sequences for primary key auto-incrementing

CREATE SEQUENCE CUSTOMER_ID_SEQ;
CREATE SEQUENCE CATEGORY_ID_SEQ;
CREATE SEQUENCE PRODUCT_ID_SEQ;
CREATE SEQUENCE ORDER_ID_SEQ;
CREATE SEQUENCE INVOICE_ID_SEQ;
CREATE SEQUENCE REVIEW_ID_SEQ;
CREATE SEQUENCE RECOMMENDATION_ID_SEQ;


-- Helper Function to find the product ID by product name

CREATE OR REPLACE FUNCTION FIND_PRODUCT_ID_BY_NAME(p_product_name IN VARCHAR2) RETURN NUMBER IS
  v_product_id NUMBER;
BEGIN
  SELECT product_id INTO v_product_id FROM Products WHERE product_name = p_product_name;
  RETURN v_product_id;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END FIND_PRODUCT_ID_BY_NAME;
/
-- Member 1 Procedures (Sravani Linga)

-- Function to find the customer ID by email

CREATE OR REPLACE FUNCTION FIND_CUSTOMER_ID(p_customer_email IN VARCHAR2) RETURN NUMBER IS
  v_customer_id NUMBER;
BEGIN
  SELECT customer_id INTO v_customer_id FROM Customers WHERE email = p_customer_email;
  RETURN v_customer_id;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END FIND_CUSTOMER_ID;
/

-- Function to find the product ID by product name

CREATE OR REPLACE FUNCTION FIND_PRODUCT_ID(p_product_name IN VARCHAR2) RETURN NUMBER IS
  v_product_id NUMBER;
BEGIN
  SELECT product_id INTO v_product_id FROM Products WHERE product_name = p_product_name;
  RETURN v_product_id;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END FIND_PRODUCT_ID;
/

-- Procedure to add a customer

CREATE OR REPLACE PROCEDURE Add_Customer(
  p_name IN VARCHAR2,
  p_email IN VARCHAR2,
  p_city IN VARCHAR2,
  p_state IN VARCHAR2,
  p_zip IN VARCHAR2
) IS
BEGIN
  INSERT INTO Customers(customer_id, name, email, city, state, zip)
  VALUES (CUSTOMER_ID_SEQ.NEXTVAL, p_name, p_email, p_city, p_state, p_zip);
END Add_Customer;
/

-- Procedure to show all customers in a specific state

CREATE OR REPLACE PROCEDURE Show_all_customers_in_state(p_state IN VARCHAR2) IS
BEGIN
  FOR customer_rec IN (SELECT name, email, city, state, credit_card_number, credit_card_type
                       FROM Customers c
                       LEFT JOIN CreditCards cc ON c.customer_id = cc.customer_id
                       WHERE c.state = p_state)
  LOOP
    DBMS_OUTPUT.PUT_LINE('Name: ' || customer_rec.name || ', Email: ' || customer_rec.email ||
                         ', Address: ' || customer_rec.city || ', ' || customer_rec.state ||
                         ', Credit Card: ' || customer_rec.credit_card_number || ' (' ||
                         customer_rec.credit_card_type || ')');
  END LOOP;
END Show_all_customers_in_state;
/

-- Procedure to add a credit card for a customer

CREATE OR REPLACE PROCEDURE Add_CreditCard(
  p_customer_email IN VARCHAR2,
  p_credit_card_number IN VARCHAR2,
  p_credit_card_type IN VARCHAR2,
  p_expiration_year IN NUMBER,
  p_expiration_month IN NUMBER
) IS
v_cid int;
BEGIN
  v_cid := FIND_CUSTOMER_ID(p_customer_email);
  if v_cid is not null then
      INSERT INTO CreditCards(customer_id, credit_card_number, credit_card_type, expiration_year, expiration_month)
    VALUES (v_cid, p_credit_card_number, p_credit_card_type, p_expiration_year, p_expiration_month);
  else
    dbms_output.put_line('Customer not found');
  end if;
END Add_CreditCard;
/

-- Procedure to report credit cards that will expire within 2 months of a given date

CREATE OR REPLACE PROCEDURE Report_Cards_Expire(p_given_date IN DATE) IS
BEGIN
  FOR card_rec IN (
    SELECT c.name, c.email, cc.credit_card_number, cc.credit_card_type, cc.expiration_year, cc.expiration_month
    FROM Customers c
    JOIN CreditCards cc ON c.customer_id = cc.customer_id
    WHERE ADD_MONTHS(TRUNC(TO_DATE(p_given_date, 'YYYY-MM-DD')), 2) >= TO_DATE(cc.expiration_year || '-' || cc.expiration_month, 'YYYY-MM')
    ORDER BY c.name, c.email
  )
  LOOP
    DBMS_OUTPUT.PUT_LINE('Name: ' || card_rec.name || ', Email: ' || card_rec.email ||
                         ', Card Number: ' || card_rec.credit_card_number || ', Card Type: ' ||
                         card_rec.credit_card_type || ', Expiration: ' || card_rec.expiration_month || '/' || card_rec.expiration_year);
  END LOOP;
END Report_Cards_Expire;
/

-- Member 2 Procedures (Ananya Smarani)

-- Procedure to add a new product category

CREATE OR REPLACE PROCEDURE Add_Category(
  p_category_name IN VARCHAR2,
  p_description IN VARCHAR2
) IS
BEGIN
  INSERT INTO ProductCategories(category_id, category_name, description)
  VALUES (CATEGORY_ID_SEQ.NEXTVAL, p_category_name, p_description);
END Add_Category;
/

-- Function to find the product category ID by category name

CREATE OR REPLACE FUNCTION FIND_PRODUCT_CATEGORY_ID(p_category_name IN VARCHAR2) RETURN int IS
  v_category_id int;
BEGIN
  dbms_output.put_line('Name: '||p_category_name);
  SELECT category_id INTO v_category_id FROM ProductCategories WHERE category_name = p_category_name;
  dbms_output.put_line('IN BEGIN');
  RETURN v_category_id;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
  dbms_output.put_line('IN EXCEPTION');
    RETURN -1;
END FIND_PRODUCT_CATEGORY_ID;
/

-- Procedure to add a new product

CREATE OR REPLACE PROCEDURE Add_Product(
  p_product_name IN VARCHAR2,
  p_quantity IN NUMBER,
  p_unit_price IN NUMBER,
  p_category_name IN VARCHAR2
) IS
  v_category_id NUMBER;
BEGIN
  v_category_id := FIND_PRODUCT_CATEGORY_ID(p_category_name);
  dbms_output.put_line('Cat: '||v_category_id);
  IF v_category_id != -1 THEN
    INSERT INTO Products(product_id, product_name, available_quantity, unit_price, category_id)
    VALUES (PRODUCT_ID_SEQ.NEXTVAL, p_product_name, p_quantity, p_unit_price, v_category_id);
  ELSE
    DBMS_OUTPUT.PUT_LINE('Category not found!');
  END IF;
END Add_Product;
/

-- Procedure to update the inventory of a product

CREATE OR REPLACE PROCEDURE Update_Inventory(
  p_product_id IN NUMBER,
  p_units IN NUMBER
) IS
BEGIN
  UPDATE Products
  SET available_quantity = available_quantity - p_units
  WHERE product_id = p_product_id;
END Update_Inventory;
/

-- Procedure to report the total inventory by category

CREATE OR REPLACE PROCEDURE Report_Inventory IS
BEGIN
  FOR category_rec IN (
    SELECT pc.category_name,
           COALESCE(SUM(p.available_quantity), 0) AS total_quantity
    FROM ProductCategories pc
    LEFT JOIN Products p ON pc.category_id = p.category_id
    GROUP BY pc.category_name
    ORDER BY pc.category_name
  )
  LOOP
    DBMS_OUTPUT.PUT_LINE('Category: ' || category_rec.category_name || ', Total Quantity: ' || category_rec.total_quantity);
  END LOOP;
END Report_Inventory;
/

-- Member 3 Procedures (Atibha Velala)

-- Function to get the unit price of a product based on its ID

CREATE OR REPLACE FUNCTION GET_UNIT_PRICE(p_product_id IN NUMBER) RETURN NUMBER IS
  v_unit_price NUMBER;
BEGIN
  SELECT unit_price INTO v_unit_price FROM Products WHERE product_id = p_product_id;
  RETURN v_unit_price;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END GET_UNIT_PRICE;
/

-- Procedure to place an order

CREATE OR REPLACE PROCEDURE Place_Order(
  p_customer_email IN VARCHAR2,
  p_product_name IN VARCHAR2,
  p_quantity IN NUMBER,
  p_credit_card_number IN VARCHAR2
) IS
  v_customer_id NUMBER;
  v_product_id NUMBER;
BEGIN
  v_customer_id := FIND_CUSTOMER_ID(p_customer_email);
  v_product_id := FIND_PRODUCT_ID(p_product_name);
  IF v_customer_id IS NOT NULL AND v_product_id IS NOT NULL THEN
    -- Call helper procedures
    UPDATE_INVENTORY(V_PRODUCT_ID,P_QUANTITY);
    INSERT INTO Orders values(ORDER_ID_SEQ.NEXTVAL,V_customer_id,V_product_id,P_quantity,SYSDATE);
    Invoice_Customer(v_customer_id, v_product_id, p_credit_card_number, p_quantity * Get_Unit_Price(v_product_id));
  ELSE
    DBMS_OUTPUT.PUT_LINE('Customer or Product not found!');
  END IF;
END Place_Order;
/

-- Procedure to show all orders

CREATE OR REPLACE PROCEDURE Show_Orders IS
BEGIN
  FOR order_rec IN (SELECT c.name AS customer_name, p.product_name, o.quantity,
                           o.quantity * p.unit_price AS amount_charged
                    FROM Orders o
                    JOIN Customers c ON o.customer_id = c.customer_id
                    JOIN Products p ON o.product_id = p.product_id)
  LOOP
    DBMS_OUTPUT.PUT_LINE('Customer: ' || order_rec.customer_name || ', Product: ' ||
                         order_rec.product_name || ', Quantity: ' || order_rec.quantity ||
                         ', Amount Charged: ' || order_rec.amount_charged);
  END LOOP;
  
  -- Calculate and display the grand total
  DECLARE
    grand_total NUMBER;
  BEGIN
    SELECT SUM(quantity * p.unit_price) INTO grand_total
    FROM Orders o
    JOIN Products p ON o.product_id = p.product_id;

    DBMS_OUTPUT.PUT_LINE('Grand Total: ' || grand_total);
  END;
END Show_Orders;
/

-- Procedure to report orders by state

CREATE OR REPLACE PROCEDURE Report_Orders_by_State(p_state IN VARCHAR2) IS
BEGIN
  FOR order_rec IN (
    SELECT c.name, c.email, COUNT(o.order_id) AS total_orders, SUM(p.unit_price * o.quantity) AS total_amount
    FROM Customers c
    LEFT JOIN Orders o ON c.customer_id = o.customer_id
    LEFT JOIN Products p ON o.product_id = p.product_id
    WHERE c.state = p_state
    GROUP BY c.name, c.email
    ORDER BY c.name, c.email
  )
  LOOP
    DBMS_OUTPUT.PUT_LINE('Name: ' || order_rec.name || ', Email: ' || order_rec.email ||
                         ', Total Orders: ' || order_rec.total_orders || ', Total Amount: ' || order_rec.total_amount);
  END LOOP;

  -- Grand Total
  DECLARE
    grand_total NUMBER;
  BEGIN
    SELECT SUM(p.unit_price * o.quantity) INTO grand_total
    FROM Orders o
    JOIN Products p ON o.product_id = p.product_id
    JOIN Customers c ON o.customer_id = c.customer_id
    WHERE c.state = p_state;

    DBMS_OUTPUT.PUT_LINE('Grand Total Amount: ' || grand_total);
  END;
END Report_Orders_by_State;
/

-- Trigger to handle low inventory alerts after an order is placed

CREATE OR REPLACE TRIGGER Low_Inventory_Trigger
AFTER INSERT ON Orders
FOR EACH ROW
DECLARE
  v_product_quantity NUMBER;
  v_product_name Products.product_name%TYPE; -- Define a variable to hold product name
BEGIN
  SELECT available_quantity INTO v_product_quantity
  FROM Products
  WHERE product_id = :NEW.product_id;

  -- Fetch the product name separately into a variable
  SELECT product_name INTO v_product_name
  FROM Products
  WHERE product_id = :NEW.product_id;

  IF v_product_quantity < 50 THEN
    DBMS_OUTPUT.PUT_LINE('Low Inventory Alert: Product ID ' || :NEW.product_id ||
                         ', Product Name ' || v_product_name || -- Use the variable here
                         ', Available Quantity ' || v_product_quantity);
  END IF;
END;
/

-- Procedure to restock a product

CREATE OR REPLACE PROCEDURE RESTOCK_PRODUCT(p_product_name IN VARCHAR2, p_quantity IN NUMBER) IS
  v_product_id NUMBER;
BEGIN
  v_product_id := FIND_PRODUCT_ID(p_product_name);

  IF v_product_id IS NOT NULL THEN
    UPDATE Products
    SET available_quantity = available_quantity + p_quantity
    WHERE product_id = v_product_id;
  ELSE
    DBMS_OUTPUT.PUT_LINE('Product not found!');
  END IF;
END RESTOCK_PRODUCT;
/

-- Member 4 Procedures (Jagadeeswari Sambangi)

-- Function to find an order ID based on customer and product IDs

CREATE OR REPLACE FUNCTION FIND_ORDER_ID(p_customer_id IN NUMBER, p_product_id IN NUMBER) RETURN NUMBER IS
  v_order_id NUMBER;
BEGIN
  SELECT order_id
  INTO v_order_id
  FROM Orders
  WHERE customer_id = p_customer_id AND product_id = p_product_id;

  RETURN v_order_id;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END FIND_ORDER_ID;
/

-- Function to find a credit card ID based on credit card number

CREATE OR REPLACE FUNCTION FIND_CREDIT_CARD_ID(p_credit_card_number IN VARCHAR2) RETURN NUMBER IS
  v_credit_card_id NUMBER;
BEGIN
  SELECT customer_id
  INTO v_credit_card_id
  FROM CreditCards
  WHERE credit_card_number = p_credit_card_number;

  RETURN v_credit_card_id;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END FIND_CREDIT_CARD_ID;
/

-- Procedure to create an invoice for a customer

CREATE OR REPLACE PROCEDURE Invoice_Customer(
  p_customer_id IN NUMBER,
  p_product_id IN NUMBER,
  p_credit_card_number IN VARCHAR2,
  p_amount IN NUMBER
) IS
  v_order_id NUMBER;
  v_credit_card_id NUMBER;
BEGIN
  v_order_id := FIND_ORDER_ID(p_customer_id, p_product_id);
  v_credit_card_id := FIND_CREDIT_CARD_ID(p_credit_card_number);
  
  IF v_order_id IS NOT NULL AND v_credit_card_id IS NOT NULL THEN
    INSERT INTO Invoices(invoice_id, order_id, customer_id, credit_card_number, amount)
    VALUES (INVOICE_ID_SEQ.NEXTVAL, v_order_id, p_customer_id, p_credit_card_number, p_amount);
  ELSE
    DBMS_OUTPUT.PUT_LINE('Order or Credit Card not found!');
  END IF;
END Invoice_Customer;
/

-- Procedure to report the best customers based on the total amount spent

CREATE OR REPLACE PROCEDURE Report_Best_Customers(p_amount_threshold IN NUMBER) IS
BEGIN
  FOR customer_rec IN (SELECT c.name, SUM(i.amount) AS total_amount_spent
                       FROM Invoices i
                       JOIN Customers c ON i.customer_id = c.customer_id
                       GROUP BY c.name
                       HAVING SUM(i.amount) > p_amount_threshold)
  LOOP
    DBMS_OUTPUT.PUT_LINE('Customer: ' || customer_rec.name || ', Total Amount Spent: ' || customer_rec.total_amount_spent);
  END LOOP;
END Report_Best_Customers;
/

-- Procedure to calculate and display fees for payments to credit cards

CREATE OR REPLACE PROCEDURE Payments_to_CC IS
BEGIN
  FOR payment_rec IN (
    SELECT
      CASE
        WHEN cc.credit_card_type = 'VISA' THEN 'VISA'
        WHEN cc.credit_card_type = 'MasterCard' THEN 'MC'
        WHEN cc.credit_card_type = 'American Express' THEN 'AMEX'
        WHEN cc.credit_card_type = 'Discover' THEN 'Discover'
      END AS credit_card_type,
      SUM(i.amount * 0.03) AS total_fee
    FROM Invoices i
    JOIN CreditCards cc ON i.credit_card_number = cc.credit_card_number
    GROUP BY cc.credit_card_type
  )
  LOOP
    DBMS_OUTPUT.PUT_LINE('Credit Card Type: ' || payment_rec.credit_card_type || ', Total Fee: ' || payment_rec.total_fee);
  END LOOP;
END Payments_to_CC;
/

-- Procedure to find thrifty customers based on total amount spent

CREATE OR REPLACE PROCEDURE THRIFTY_CUSTOMER(p_x IN NUMBER) IS
BEGIN
  FOR customer_rec IN (
    SELECT name, email, total_amount_spent
    FROM (
      SELECT c.name, c.email, SUM(i.amount) AS total_amount_spent
      FROM Invoices i
      JOIN Customers c ON i.customer_id = c.customer_id
      GROUP BY c.name, c.email
      ORDER BY total_amount_spent ASC
    )
    WHERE ROWNUM <= p_x -- Use ROWNUM to limit the number of rows fetched
  ) 
  LOOP
    DBMS_OUTPUT.PUT_LINE('Customer: ' || customer_rec.name || ', Email: ' || customer_rec.email ||
                         ', Total Amount Spent: ' || customer_rec.total_amount_spent);
  END LOOP;
END THRIFTY_CUSTOMER;
/


-- Member 5 Procedures (Khushdeep Kaur)

-- Function to find a product ID based on product name

CREATE OR REPLACE FUNCTION FIND_PRODUCT_ID_BY_NAME(p_product_name IN VARCHAR2) RETURN NUMBER IS
  v_product_id NUMBER;
BEGIN
  SELECT product_id INTO v_product_id FROM Products WHERE product_name = p_product_name;
  RETURN v_product_id;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END FIND_PRODUCT_ID_BY_NAME;
/

-- Procedure to add a review for a product

CREATE OR REPLACE PROCEDURE Add_Review(
  p_reviewer_email IN VARCHAR2,
  p_stars_given IN NUMBER,
  p_product_name IN VARCHAR2,
  p_review_text IN VARCHAR2
) IS
  v_product_id NUMBER;
BEGIN
  v_product_id := FIND_PRODUCT_ID_BY_NAME(p_product_name);
  
  IF v_product_id IS NOT NULL THEN
    INSERT INTO Reviews(review_id, product_id, reviewer_email, stars_given, review_text)
    VALUES (REVIEW_ID_SEQ.NEXTVAL, v_product_id, p_reviewer_email, p_stars_given, p_review_text);
  ELSE
    DBMS_OUTPUT.PUT_LINE('Product not found!');
  END IF;
END Add_Review;
/

-- Procedure to display top-rated and beware products

CREATE OR REPLACE PROCEDURE BUY_OR_BEWARE(p_x IN NUMBER) IS
   v_counter NUMBER := 0;  -- Counter to limit the number of rows
BEGIN
   DBMS_OUTPUT.PUT_LINE('Top rated products:');
   FOR top_products_rec IN (
      SELECT
         AVG(r.stars_given) AS avg_stars,
         p.product_id,
         p.product_name,
         STDDEV(r.stars_given) AS std_dev
      FROM
         Reviews r
         JOIN Products p ON r.product_id = p.product_id
      GROUP BY
         p.product_id,
         p.product_name
      ORDER BY
         AVG(r.stars_given) DESC
   )
   LOOP
      EXIT WHEN v_counter >= p_x OR top_products_rec.avg_stars IS NULL;

      v_counter := v_counter + 1;
      DBMS_OUTPUT.PUT_LINE('Avg Stars: ' || top_products_rec.avg_stars ||
                           ', Product ID: ' || top_products_rec.product_id ||
                           ', Product Name: ' || top_products_rec.product_name ||
                           ', Std Dev: ' || top_products_rec.std_dev);
   END LOOP;

   v_counter := 0;  -- Reset the counter for the next loop
   DBMS_OUTPUT.PUT_LINE('Buyer Beware: Stay Away from…');
   FOR beware_products_rec IN (
      SELECT
         AVG(r.stars_given) AS avg_stars,
         p.product_id,
         p.product_name,
         STDDEV(r.stars_given) AS std_dev
      FROM
         Reviews r
         JOIN Products p ON r.product_id = p.product_id
      GROUP BY
         p.product_id,
         p.product_name
      ORDER BY
         AVG(r.stars_given) ASC
   )
   LOOP
      EXIT WHEN v_counter >= p_x OR beware_products_rec.avg_stars IS NULL;

      v_counter := v_counter + 1;
      DBMS_OUTPUT.PUT_LINE('Avg Stars: ' || beware_products_rec.avg_stars ||
                           ', Product ID: ' || beware_products_rec.product_id ||
                           ', Product Name: ' || beware_products_rec.product_name ||
                           ', Std Dev: ' || beware_products_rec.std_dev);
   END LOOP;
END BUY_OR_BEWARE;
/

-- Procedure to recommend products to a customer

CREATE OR REPLACE PROCEDURE RECOMMEND_TO_CUSTOMER(p_customer_id IN NUMBER) IS
BEGIN
  FOR recommendation_rec IN (
    SELECT p.product_name AS recommended_product, AVG(r.stars_given) AS avg_stars
    FROM Products p
    LEFT JOIN Reviews r ON p.product_id = r.product_id
    WHERE p.product_id NOT IN (
        SELECT recommended_product_id
        FROM Recommendations
        WHERE customer_id = p_customer_id
      )
    GROUP BY p.product_name
    ORDER BY AVG(r.stars_given) DESC
  )
  LOOP
    INSERT INTO Recommendations (recommendation_id, customer_id, recommended_product_id, recommendation_date)
    VALUES (RECOMMENDATION_ID_SEQ.NEXTVAL, p_customer_id, (SELECT product_id FROM Products WHERE product_name = recommendation_rec.recommended_product), SYSTIMESTAMP);
    EXIT;
  END LOOP;
END RECOMMEND_TO_CUSTOMER;
/

-- Procedure to list product recommendations for all customers

CREATE OR REPLACE PROCEDURE LIST_RECOMMENDATIONS IS
BEGIN
  FOR recommendation_rec IN (
    SELECT c.name AS customer_name, p.product_name AS recommended_product
    FROM Recommendations r
    JOIN Customers c ON r.customer_id = c.customer_id
    JOIN Products p ON r.recommended_product_id = p.product_id
  )
  LOOP
    DBMS_OUTPUT.PUT_LINE('Customer: ' || recommendation_rec.customer_name || ', Recommended Product: ' || recommendation_rec.recommended_product);
  END LOOP;
END LIST_RECOMMENDATIONS;
/

---- Anonymous PL/SQL block

BEGIN
  -- Adding customers
  Add_Customer('Sophia Johnson', 'sophia@example.com', 'New York', 'NY', '10001');
  Add_Customer('William Brown', 'william@example.com', 'Los Angeles', 'CA', '90001');
  Add_Customer('Olivia Smith', 'olivia@example.com', 'Miami', 'FL', '33101');
  Add_Customer('James Miller', 'james@example.com', 'Seattle', 'WA', '98101');
  Add_Customer('Ava Jones', 'ava@example.com', 'Dallas', 'TX', '75201');

  -- Adding credit cards
  Add_CreditCard('sophia@example.com', '9876-5432-1098-7654', 'MasterCard', 2024, 8);
  Add_CreditCard('william@example.com', '1234-5678-9012-3456', 'VISA', 2025, 12);
  Add_CreditCard('olivia@example.com', '1111-2222-3333-4444', 'AMEX', 2023, 5);
  Add_CreditCard('james@example.com', '5555-6666-7777-8888', 'Discover', 2026, 11);
  Add_CreditCard('ava@example.com', '9999-8888-7777-6666', 'VISA', 2024, 9);

  -- Adding categories and products
  Add_Category('Clothing', 'Trendy fashion items');
  Add_Category('Books', 'Bestsellers and classics');
  Add_Product('T-Shirt', 50, 15, 'Clothing');
  Add_Product('Jeans', 30, 40, 'Clothing');
  Add_Product('Dress', 25, 50, 'Clothing');
  Add_Product('Jacket', 20, 60, 'Clothing');
  Add_Category('Electronics', 'Latest gadgets and devices');
  Add_Product('Smartphone', 500, 30, 'Electronics');
  Add_Product('Laptop', 800, 20, 'Electronics');
  Add_Product('Tablet', 300, 35, 'Electronics');
  Add_Category('Home Decor', 'Beautiful additions to your home');
  Add_Product('Python Crash Course', 25, 100, 'Books');
  Add_Product('The Great Gatsby', 15, 80, 'Books');
  Add_Product('Home Wall Art', 40, 25, 'Home Decor');
  Add_Product('Cushion Covers', 10, 60, 'Home Decor');

  -- Placing orders
  Place_Order('sophia@example.com', 'T-Shirt', 3, '9876-5432-1098-7654');
  Place_Order('william@example.com', 'Jeans', 2, '1234-5678-9012-3456');
  Place_Order('olivia@example.com', 'Dress', 1, '1111-2222-3333-4444');
  Place_Order('james@example.com', 'Jacket', 4, '5555-6666-7777-8888');
  Place_Order('ava@example.com', 'T-Shirt', 2, '9999-8888-7777-6666');

  -- Showing orders
  Show_Orders;

  -- Reporting best customers
  Report_Best_Customers(800);

  -- Adding reviews
  Add_Review('user4@example.com', 4, 'T-Shirt', 'Great quality and fit!');
  Add_Review('user5@example.com', 5, 'Jeans', 'Perfect size and comfortable.');
  Add_Review('user6@example.com', 3, 'Dress', 'Nice design but a bit tight.');

  -- Buy or Beware with more products
  BUY_OR_BEWARE(5);

  -- Restocking more products
  RESTOCK_PRODUCT('Jacket', 15);
  RESTOCK_PRODUCT('Smartphone', 20);
  RESTOCK_PRODUCT('Tablet', 25);
  RESTOCK_PRODUCT('Home Wall Art', 30);

  -- Calculating payments to credit card companies
  Payments_to_CC;

  -- Identifying thrifty customers
  THRIFTY_CUSTOMER(6);

  -- Recommending products to more customers
  RECOMMEND_TO_CUSTOMER(4);
  RECOMMEND_TO_CUSTOMER(2);
  RECOMMEND_TO_CUSTOMER(5);
  RECOMMEND_TO_CUSTOMER(3);

  -- Listing all recommendations
  LIST_RECOMMENDATIONS;
END;
/

select * from customers;
select * from productcategories;
select * from products;
select * from creditcards;
select * from invoices;
select * from orders;
select * from reviews;
select * from recommendations;